// Android Gradle Plugin out of the box only supports code coverage for instrumentation espresso) tests.
// This add support for unit tests as well.

def fileFilter = [
    '**/R.class',
    '**/R$*.class',
    '**/BuildConfig.*',
    '**/Manifest*.*',
    '**/*Test*.*',
    'android/**/*.*',

    //Butterknife hack for multi-modules poroject
    '**/R2.class',
    '**/R2$*.class',
    '**/*_ViewBinding*.*',

    //Dagger 2
    '**/*Dagger*Component*.*',
    '**/*Module.*',
    '**/*Module$*.*',
    '**/*MembersInjector*.*',
    '**/*_Factory*.*',
    '**/*Provide*Factory*.*',

    //Autofactory
    '**/*Factory.*',

    //Classes I intentionally don't want to test
    '**/*Activity.*',
    '**/App.class',
    '**/*Adapter.*',
    '**/*ViewHolder*.*',
    '**/api/response/*.*',
    '**/data/model/*.*',
]

task testUiUnitCoverageReport(type: JacocoReport) {
  group = 'Reporting'
  description = "Generate Jacoco coverage reports for the debug build. Only unit tests."

  //Make sure that tests from all modules are run before coverage report
  dependsOn ":app:testDebugUnitTest"
  dependsOn ":app:createDebugCoverageReport"

  classDirectories = files([
      fileTree(dir: "$project.rootDir/app/build/intermediates/javac/debug", excludes: fileFilter),
  ])
  def coverageSourceDirs = [
      "$project.rootDir/app/src/main/java",
  ]
  additionalSourceDirs = files(coverageSourceDirs)
  sourceDirectories = files(coverageSourceDirs)
  executionData = fileTree(dir: project.rootDir, includes: [
      'app/build/jacoco/testDebugUnitTest.exec',
      "app/build/outputs/code_coverage/debugAndroidTest/connected/*.ec",
  ])

  reports {
    xml.enabled = false
    html.enabled = true
  }
}